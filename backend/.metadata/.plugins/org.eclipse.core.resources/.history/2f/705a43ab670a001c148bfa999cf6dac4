/**
 * 
 */
package com.maria.api.service;

import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.maria.api.exception.ResourceNotFoundException;
import com.maria.api.model.Change;
import com.maria.api.repository.IChangeRepository;

/**
 * @author Maria
 *
 */

@Service
@Transactional
public class ChangeServiceImpl implements ChangeService{

	@Autowired
	private IChangeRepository changeRepository;
	@Override
	public Change createChange(Change change) {
		return changeRepository.save(change);
	}

	@Override
	public Change updateChange(Change change) {
		Optional<Change> changeDb = this.changeRepository.findById(change.getId());
	
		if(changeDb.isPresent()) {
			Change changeUpdate = changeDb.get();
			changeUpdate.setId(change.getId());
			changeUpdate.setMount(change.getMount());
			changeUpdate.setNewMount(change.getNewMount());
			changeUpdate.getRelation().setId(change.getRelation().getId());
			return changeUpdate;
		}else {
			throw new ResourceNotFoundException("Record not found with id: " + change.getId());
		}
	}

	@Override
	public List<Change> getAllChange() {
		return changeRepository.findAll();
	}

	@Override
	public Change getChangeById(long changeId) {
		Optional<Change> changeDb = this.changeRepository.findById(changeId);

		if(changeDb.isPresent()) {
			return changeDb.get();
		}else {
			throw new ResourceNotFoundException("Record not found with id: " + changeId);
		}
	}

	@Override
	public void deleteChange(long changeId) {
		Optional<Change> changeDb = this.changeRepository.findById(changeId);

		if(changeDb.isPresent()) {
			this.changeRepository.delete(changeDb.get());
		}else {
			throw new ResourceNotFoundException("Record not found with id: " + changeId);
		}
	}

}
